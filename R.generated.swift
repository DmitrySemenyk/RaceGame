//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 9 files.
  struct file {
    /// Resource file `96681345928a4a4a6279e7f12c27c500.gif`.
    static let a4a4a6279e7f12c27c500Gif = Rswift.FileResource(bundle: R.hostingBundle, name: "96681345928a4a4a6279e7f12c27c500", pathExtension: "gif")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `advanced_pixel-7.ttf`.
    static let advanced_pixel7Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "advanced_pixel-7", pathExtension: "ttf")
    /// Resource file `bgScore.gif`.
    static let bgScoreGif = Rswift.FileResource(bundle: R.hostingBundle, name: "bgScore", pathExtension: "gif")
    /// Resource file `coins.gif`.
    static let coinsGif = Rswift.FileResource(bundle: R.hostingBundle, name: "coins", pathExtension: "gif")
    /// Resource file `newMaxBG.gif`.
    static let newMaxBGGif = Rswift.FileResource(bundle: R.hostingBundle, name: "newMaxBG", pathExtension: "gif")
    /// Resource file `smoke.gif`.
    static let smokeGif = Rswift.FileResource(bundle: R.hostingBundle, name: "smoke", pathExtension: "gif")
    /// Resource file `source.gif`.
    static let sourceGif = Rswift.FileResource(bundle: R.hostingBundle, name: "source", pathExtension: "gif")
    /// Resource file `swipe.gif`.
    static let swipeGif = Rswift.FileResource(bundle: R.hostingBundle, name: "swipe", pathExtension: "gif")

    /// `bundle.url(forResource: "96681345928a4a4a6279e7f12c27c500", withExtension: "gif")`
    static func a4a4a6279e7f12c27c500Gif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.a4a4a6279e7f12c27c500Gif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "advanced_pixel-7", withExtension: "ttf")`
    static func advanced_pixel7Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.advanced_pixel7Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bgScore", withExtension: "gif")`
    static func bgScoreGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bgScoreGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "coins", withExtension: "gif")`
    static func coinsGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.coinsGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "newMaxBG", withExtension: "gif")`
    static func newMaxBGGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.newMaxBGGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "smoke", withExtension: "gif")`
    static func smokeGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.smokeGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "source", withExtension: "gif")`
    static func sourceGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "swipe", withExtension: "gif")`
    static func swipeGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swipeGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `Advanced_Pixel-7`.
    static let advanced_Pixel7 = Rswift.FontResource(fontName: "Advanced_Pixel-7")

    /// `UIFont(name: "Advanced_Pixel-7", size: ...)`
    static func advanced_Pixel7(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: advanced_Pixel7, size: size)
    }

    static func validate() throws {
      if R.font.advanced_Pixel7(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Advanced_Pixel-7' could not be loaded, is 'advanced_pixel-7.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 55 images.
  struct image {
    /// Image `96681345928a4a4a6279e7f12c27c500.gif`.
    static let a4a4a6279e7f12c27c500Gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "96681345928a4a4a6279e7f12c27c500.gif")
    /// Image `Blue car crashed`.
    static let blueCarCrashed = Rswift.ImageResource(bundle: R.hostingBundle, name: "Blue car crashed")
    /// Image `Bus blue front`.
    static let busBlueFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bus blue front")
    /// Image `Bus blue`.
    static let busBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bus blue")
    /// Image `Bus orange front`.
    static let busOrangeFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bus orange front")
    /// Image `Bus orange`.
    static let busOrange = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bus orange")
    /// Image `Car Striped`.
    static let carStriped = Rswift.ImageResource(bundle: R.hostingBundle, name: "Car Striped")
    /// Image `Car blue front`.
    static let carBlueFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "Car blue front")
    /// Image `Car blue`.
    static let carBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "Car blue")
    /// Image `Car grey front`.
    static let carGreyFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "Car grey front")
    /// Image `Car grey`.
    static let carGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "Car grey")
    /// Image `Car red front`.
    static let carRedFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "Car red front")
    /// Image `Car red striped front`.
    static let carRedStripedFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "Car red striped front")
    /// Image `Car red`.
    static let carRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "Car red")
    /// Image `Car yellow front`.
    static let carYellowFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "Car yellow front")
    /// Image `Car yellow`.
    static let carYellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Car yellow")
    /// Image `Dead car front`.
    static let deadCarFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dead car front")
    /// Image `Dead car`.
    static let deadCar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dead car")
    /// Image `Grey car crashed`.
    static let greyCarCrashed = Rswift.ImageResource(bundle: R.hostingBundle, name: "Grey car crashed")
    /// Image `PixelArt`.
    static let pixelArt = Rswift.ImageResource(bundle: R.hostingBundle, name: "PixelArt")
    /// Image `Police car front`.
    static let policeCarFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "Police car front")
    /// Image `Police car`.
    static let policeCar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Police car")
    /// Image `Red car crashed`.
    static let redCarCrashed = Rswift.ImageResource(bundle: R.hostingBundle, name: "Red car crashed")
    /// Image `Red striped car crashed`.
    static let redStripedCarCrashed = Rswift.ImageResource(bundle: R.hostingBundle, name: "Red striped car crashed")
    /// Image `School bus front`.
    static let schoolBusFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "School bus front")
    /// Image `School bus`.
    static let schoolBus = Rswift.ImageResource(bundle: R.hostingBundle, name: "School bus")
    /// Image `Taxi front`.
    static let taxiFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "Taxi front")
    /// Image `Taxi`.
    static let taxi = Rswift.ImageResource(bundle: R.hostingBundle, name: "Taxi")
    /// Image `Tire marks`.
    static let tireMarks = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tire marks")
    /// Image `Truck front gray`.
    static let truckFrontGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "Truck front gray")
    /// Image `Truck front`.
    static let truckFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "Truck front")
    /// Image `Truck gray`.
    static let truckGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "Truck gray")
    /// Image `Truck white front`.
    static let truckWhiteFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "Truck white front")
    /// Image `Truck white`.
    static let truckWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "Truck white")
    /// Image `Truck`.
    static let truck = Rswift.ImageResource(bundle: R.hostingBundle, name: "Truck")
    /// Image `Van rundown front`.
    static let vanRundownFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "Van rundown front")
    /// Image `Van rundown`.
    static let vanRundown = Rswift.ImageResource(bundle: R.hostingBundle, name: "Van rundown")
    /// Image `White truck front`.
    static let whiteTruckFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "White truck front")
    /// Image `White truck`.
    static let whiteTruck = Rswift.ImageResource(bundle: R.hostingBundle, name: "White truck")
    /// Image `White van front`.
    static let whiteVanFront = Rswift.ImageResource(bundle: R.hostingBundle, name: "White van front")
    /// Image `White van`.
    static let whiteVan = Rswift.ImageResource(bundle: R.hostingBundle, name: "White van")
    /// Image `Yellow car crashed`.
    static let yellowCarCrashed = Rswift.ImageResource(bundle: R.hostingBundle, name: "Yellow car crashed")
    /// Image `bgScore.gif`.
    static let bgScoreGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "bgScore.gif")
    /// Image `bgiMadMax error`.
    static let bgiMadMaxError = Rswift.ImageResource(bundle: R.hostingBundle, name: "bgiMadMax error")
    /// Image `bgiMadMax`.
    static let bgiMadMax = Rswift.ImageResource(bundle: R.hostingBundle, name: "bgiMadMax")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `coins.gif`.
    static let coinsGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "coins.gif")
    /// Image `garagelight`.
    static let garagelight = Rswift.ImageResource(bundle: R.hostingBundle, name: "garagelight")
    /// Image `newMaxBG.gif`.
    static let newMaxBGGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "newMaxBG.gif")
    /// Image `noun_settings pixel art_2758641`.
    static let noun_settingsPixelArt_2758641 = Rswift.ImageResource(bundle: R.hostingBundle, name: "noun_settings pixel art_2758641")
    /// Image `roadLines`.
    static let roadLines = Rswift.ImageResource(bundle: R.hostingBundle, name: "roadLines")
    /// Image `smoke.gif`.
    static let smokeGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "smoke.gif")
    /// Image `source.gif`.
    static let sourceGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "source.gif")
    /// Image `start`.
    static let start = Rswift.ImageResource(bundle: R.hostingBundle, name: "start")
    /// Image `swipe.gif`.
    static let swipeGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "swipe.gif")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "96681345928a4a4a6279e7f12c27c500.gif", bundle: ..., traitCollection: ...)`
    static func a4a4a6279e7f12c27c500Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.a4a4a6279e7f12c27c500Gif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Blue car crashed", bundle: ..., traitCollection: ...)`
    static func blueCarCrashed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueCarCrashed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bus blue front", bundle: ..., traitCollection: ...)`
    static func busBlueFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.busBlueFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bus blue", bundle: ..., traitCollection: ...)`
    static func busBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.busBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bus orange front", bundle: ..., traitCollection: ...)`
    static func busOrangeFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.busOrangeFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bus orange", bundle: ..., traitCollection: ...)`
    static func busOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.busOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Car Striped", bundle: ..., traitCollection: ...)`
    static func carStriped(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carStriped, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Car blue front", bundle: ..., traitCollection: ...)`
    static func carBlueFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carBlueFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Car blue", bundle: ..., traitCollection: ...)`
    static func carBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Car grey front", bundle: ..., traitCollection: ...)`
    static func carGreyFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carGreyFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Car grey", bundle: ..., traitCollection: ...)`
    static func carGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Car red front", bundle: ..., traitCollection: ...)`
    static func carRedFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carRedFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Car red striped front", bundle: ..., traitCollection: ...)`
    static func carRedStripedFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carRedStripedFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Car red", bundle: ..., traitCollection: ...)`
    static func carRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Car yellow front", bundle: ..., traitCollection: ...)`
    static func carYellowFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carYellowFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Car yellow", bundle: ..., traitCollection: ...)`
    static func carYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Dead car front", bundle: ..., traitCollection: ...)`
    static func deadCarFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deadCarFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Dead car", bundle: ..., traitCollection: ...)`
    static func deadCar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deadCar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Grey car crashed", bundle: ..., traitCollection: ...)`
    static func greyCarCrashed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greyCarCrashed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PixelArt", bundle: ..., traitCollection: ...)`
    static func pixelArt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pixelArt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Police car front", bundle: ..., traitCollection: ...)`
    static func policeCarFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.policeCarFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Police car", bundle: ..., traitCollection: ...)`
    static func policeCar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.policeCar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Red car crashed", bundle: ..., traitCollection: ...)`
    static func redCarCrashed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redCarCrashed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Red striped car crashed", bundle: ..., traitCollection: ...)`
    static func redStripedCarCrashed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redStripedCarCrashed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "School bus front", bundle: ..., traitCollection: ...)`
    static func schoolBusFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.schoolBusFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "School bus", bundle: ..., traitCollection: ...)`
    static func schoolBus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.schoolBus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Taxi front", bundle: ..., traitCollection: ...)`
    static func taxiFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.taxiFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Taxi", bundle: ..., traitCollection: ...)`
    static func taxi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.taxi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tire marks", bundle: ..., traitCollection: ...)`
    static func tireMarks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tireMarks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Truck front gray", bundle: ..., traitCollection: ...)`
    static func truckFrontGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truckFrontGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Truck front", bundle: ..., traitCollection: ...)`
    static func truckFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truckFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Truck gray", bundle: ..., traitCollection: ...)`
    static func truckGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truckGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Truck white front", bundle: ..., traitCollection: ...)`
    static func truckWhiteFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truckWhiteFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Truck white", bundle: ..., traitCollection: ...)`
    static func truckWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truckWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Truck", bundle: ..., traitCollection: ...)`
    static func truck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Van rundown front", bundle: ..., traitCollection: ...)`
    static func vanRundownFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vanRundownFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Van rundown", bundle: ..., traitCollection: ...)`
    static func vanRundown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vanRundown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "White truck front", bundle: ..., traitCollection: ...)`
    static func whiteTruckFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteTruckFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "White truck", bundle: ..., traitCollection: ...)`
    static func whiteTruck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteTruck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "White van front", bundle: ..., traitCollection: ...)`
    static func whiteVanFront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteVanFront, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "White van", bundle: ..., traitCollection: ...)`
    static func whiteVan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteVan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Yellow car crashed", bundle: ..., traitCollection: ...)`
    static func yellowCarCrashed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yellowCarCrashed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bgScore.gif", bundle: ..., traitCollection: ...)`
    static func bgScoreGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgScoreGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bgiMadMax error", bundle: ..., traitCollection: ...)`
    static func bgiMadMaxError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgiMadMaxError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bgiMadMax", bundle: ..., traitCollection: ...)`
    static func bgiMadMax(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgiMadMax, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "coins.gif", bundle: ..., traitCollection: ...)`
    static func coinsGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coinsGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garagelight", bundle: ..., traitCollection: ...)`
    static func garagelight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garagelight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "newMaxBG.gif", bundle: ..., traitCollection: ...)`
    static func newMaxBGGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newMaxBGGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noun_settings pixel art_2758641", bundle: ..., traitCollection: ...)`
    static func noun_settingsPixelArt_2758641(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noun_settingsPixelArt_2758641, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "roadLines", bundle: ..., traitCollection: ...)`
    static func roadLines(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.roadLines, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smoke.gif", bundle: ..., traitCollection: ...)`
    static func smokeGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smokeGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "source.gif", bundle: ..., traitCollection: ...)`
    static func sourceGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sourceGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "start", bundle: ..., traitCollection: ...)`
    static func start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "swipe.gif", bundle: ..., traitCollection: ...)`
    static func swipeGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.swipeGif, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 6 nibs.
  struct nib {
    /// Nib `BackGroundImageView`.
    static let backGroundImageView = _R.nib._BackGroundImageView()
    /// Nib `CarsImageView`.
    static let carsImageView = _R.nib._CarsImageView()
    /// Nib `CoinsView`.
    static let coinsView = _R.nib._CoinsView()
    /// Nib `RoadLinesView`.
    static let roadLinesView = _R.nib._RoadLinesView()
    /// Nib `ScorebordTableViewCell`.
    static let scorebordTableViewCell = _R.nib._ScorebordTableViewCell()
    /// Nib `SettingsCarCollectionViewCell`.
    static let settingsCarCollectionViewCell = _R.nib._SettingsCarCollectionViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BackGroundImageView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.backGroundImageView) instead")
    static func backGroundImageView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.backGroundImageView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CarsImageView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.carsImageView) instead")
    static func carsImageView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.carsImageView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CoinsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coinsView) instead")
    static func coinsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coinsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RoadLinesView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.roadLinesView) instead")
    static func roadLinesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.roadLinesView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScorebordTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scorebordTableViewCell) instead")
    static func scorebordTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scorebordTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingsCarCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsCarCollectionViewCell) instead")
    static func settingsCarCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsCarCollectionViewCell)
    }
    #endif

    static func backGroundImageView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BackGroundImageView? {
      return R.nib.backGroundImageView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BackGroundImageView
    }

    static func carsImageView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.carsImageView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func coinsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoinsView? {
      return R.nib.coinsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoinsView
    }

    static func roadLinesView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RoadLinesView? {
      return R.nib.roadLinesView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RoadLinesView
    }

    static func scorebordTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScorebordTableViewCell? {
      return R.nib.scorebordTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScorebordTableViewCell
    }

    static func settingsCarCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsCarCollectionViewCell? {
      return R.nib.settingsCarCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsCarCollectionViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ScorebordTableViewCell`.
    static let scorebordTableViewCell: Rswift.ReuseIdentifier<ScorebordTableViewCell> = Rswift.ReuseIdentifier(identifier: "ScorebordTableViewCell")
    /// Reuse identifier `SettingsCarCollectionViewCell`.
    static let settingsCarCollectionViewCell: Rswift.ReuseIdentifier<SettingsCarCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "SettingsCarCollectionViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _BackGroundImageView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BackGroundImageView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BackGroundImageView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BackGroundImageView
      }

      fileprivate init() {}
    }

    struct _CarsImageView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CarsImageView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CoinsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CoinsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CoinsView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoinsView
      }

      fileprivate init() {}
    }

    struct _RoadLinesView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RoadLinesView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RoadLinesView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RoadLinesView
      }

      fileprivate init() {}
    }

    struct _ScorebordTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ScorebordTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ScorebordTableViewCell"
      let name = "ScorebordTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScorebordTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScorebordTableViewCell
      }

      fileprivate init() {}
    }

    struct _SettingsCarCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SettingsCarCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "SettingsCarCollectionViewCell"
      let name = "SettingsCarCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsCarCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsCarCollectionViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Main"
      let resultViewController = StoryboardViewControllerResource<ResultViewController>(identifier: "ResultViewController")
      let scoreboardViewController = StoryboardViewControllerResource<ScoreboardViewController>(identifier: "ScoreboardViewController")
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      let viewController = StoryboardViewControllerResource<ViewController>(identifier: "ViewController")

      func resultViewController(_: Void = ()) -> ResultViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resultViewController)
      }

      func scoreboardViewController(_: Void = ()) -> ScoreboardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scoreboardViewController)
      }

      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }

      func viewController(_: Void = ()) -> ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "PixelArt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PixelArt' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "noun_settings pixel art_2758641", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noun_settings pixel art_2758641' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "start", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'start' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().resultViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resultViewController' could not be loaded from storyboard 'Main' as 'ResultViewController'.") }
        if _R.storyboard.main().scoreboardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scoreboardViewController' could not be loaded from storyboard 'Main' as 'ScoreboardViewController'.") }
        if _R.storyboard.main().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Main' as 'SettingsViewController'.") }
        if _R.storyboard.main().viewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'Main' as 'ViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
